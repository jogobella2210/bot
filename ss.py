import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, PhotoSize
from aiogram.filters import Command
from dotenv import load_dotenv
import asyncio
from openai import AsyncOpenAI
from PIL import Image, ImageEnhance, ImageFilter
import pytesseract
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv("ss12.env")  # –í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —à–ª—è—Ö –¥–æ –≤–∞—à–æ–≥–æ —Ñ–∞–π–ª—É .env

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω—ñ–≤
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
TELEGRAM_CHANNEL = os.getenv("TELEGRAM_CHANNEL")  # –Ü–º'—è –≤–∞—à–æ–≥–æ –∫–∞–Ω–∞–ª—É (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ @)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω—ñ–≤
if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY or not TELEGRAM_CHANNEL:
    raise ValueError("TELEGRAM_BOT_TOKEN, OPENAI_API_KEY –∞–±–æ TELEGRAM_CHANNEL –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OpenAI API
client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ —ñ—Å—Ç–æ—Ä—ñ—ó
user_states = {}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏
async def is_subscribed(user_id):
    try:
        member = await bot.get_chat_member(chat_id=TELEGRAM_CHANNEL, user_id=user_id)
        return member.status in ["member", "administrator", "creator"]
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")
        return False

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
@dp.message(Command("start"))
async def send_welcome(message: Message):
    user_id = message.from_user.id
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in user_states:
        user_states[user_id] = {"verified": False, "history": []}

    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç —ñ —è –∑–Ω–∞—é –≤—Å–µ. –ß–µ–∫–∞—é –Ω–∞ –≤–∞—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –í–∏ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º!")

# –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
@dp.message(F.text)
async def handle_message(message: Message):
    user_id = message.from_user.id

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    if user_id not in user_states:
        user_states[user_id] = {"verified": False, "history": []}

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏
    if not user_states[user_id]["verified"]:
        if not await is_subscribed(user_id):
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="ü¶æ–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ AI REVOLUTION | HUBü¶æ",
                            url=f"https://t.me/{TELEGRAM_CHANNEL.lstrip('@')}"
                        )
                    ]
                ]
            )
            await message.answer(
                "üîú–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª.üëá",
                reply_markup=keyboard
            )
            return
        user_states[user_id]["verified"] = True

    # –î–æ–¥–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
    user_states[user_id]["history"].append({"role": "user", "content": message.text})

    waiting_message = await message.answer("ü§î –Ø –ø–æ–∫–∏ –¥—É–º–∞—é, –∑–∞—á–µ–∫–∞–π –æ–¥–Ω—É —Å–µ–∫—É–Ω–¥—É...")
    try:
        # –í–∏–∫–ª–∏–∫ OpenAI API –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å—Ç–æ—Ä—ñ—ó
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=user_states[user_id]["history"]
        )
        answer = response.choices[0].message.content.strip()

        # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –±–æ—Ç–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó
        user_states[user_id]["history"].append({"role": "assistant", "content": answer})

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è
        await bot.delete_message(chat_id=message.chat.id, message_id=waiting_message.message_id)

        # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        await message.answer(answer)

    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        logging.error(f"–Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞: {e}")

# –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å
@dp.message(F.photo)
async def handle_photo(message: Message):
    try:
        photo: PhotoSize = message.photo[-1]
        file = await bot.download(photo.file_id)
        image_path = "temp_image.jpg"

        with open(image_path, "wb") as f:
            f.write(file.read())

        # –ü–æ–ø–µ—Ä–µ–¥–Ω—è –æ–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        img = Image.open(image_path)
        img = img.convert("L")  # –ß–æ—Ä–Ω–æ-–±—ñ–ª–∏–π —Ä–µ–∂–∏–º
        img = img.filter(ImageFilter.SHARPEN)  # –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ
        img = ImageEnhance.Contrast(img).enhance(2)  # –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É

        # –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
        text = pytesseract.image_to_string(img, lang="ukr")  # –ó–º—ñ–Ω–∞ –º–æ–≤–∏ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É

        if not text.strip():
            await message.answer("–ù–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç—É.")
            return

        # –í–∏–∫–ª–∏–∫ OpenAI –¥–ª—è —Ç–µ–∫—Å—Ç—É —ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": f"–î–æ–ø–æ–º–æ–∂–∏ –≤–∏—Ä—ñ—à–∏—Ç–∏ —Ü–µ –∑–∞–≤–¥–∞–Ω–Ω—è:\n{text}"},
            ]
        )
        answer = response.choices[0].message.content.strip()
        await message.answer(f"–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{text}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥—å GPT:\n{answer}")

        # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
        os.remove(image_path)

    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
